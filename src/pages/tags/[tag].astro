---
import { getCollection } from 'astro:content';
import BaseLayout from '../../layouts/BaseLayout.astro';
import PostCard from '../../components/PostCard.astro';
import { SITE_TITLE } from '../../consts';
import { decodePathSegmentSafe, encodePathSegmentSafe } from '../../utils/safeSlug';

export async function getStaticPaths() {
  const posts = await getCollection('blog');
  const tags = new Set<string>();
  
  posts.forEach(post => {
    const postTags = post.data.tags || [];
    postTags.forEach(tag => tags.add(tag));
  });

  return Array.from(tags).map(tag => ({
    params: { tag: encodePathSegmentSafe(tag) },
    props: { tag }
  }));
}

const { tag } = Astro.props as { tag: string };
// 从URL参数中获取标签名（安全解码）
const tagParam = Astro.params.tag as string;
const decodedTag = tagParam ? decodePathSegmentSafe(tagParam) : tag;

const posts = (await getCollection('blog')).filter(post => 
  post.data.tags && post.data.tags.includes(decodedTag)
).sort((a, b) => b.data.pubDate.valueOf() - a.data.pubDate.valueOf());
---

<BaseLayout title={`标签: ${decodedTag} - ${SITE_TITLE}`} description={`标签 ${decodedTag} 下的所有文章`}>
  <div class="tag-page-container">
    <header class="page-header">
      <div class="tag-info">
        <div class="tag-icon">
          <i class="fas fa-tag"></i>
        </div>
        <div>
          <h1>#{decodedTag}</h1>
          <p>{posts.length} 篇文章</p>
        </div>
      </div>
      
    </header>

    <div class="posts-section">
      <div class="posts-grid">
        {posts.map((post) => (
          <PostCard post={post} />
        ))}
      </div>

      {posts.length === 0 && (
        <div class="empty-state">
          <i class="fas fa-tag"></i>
          <p>该标签下暂无文章</p>
        </div>
      )}
    </div>
  </div>
</BaseLayout>

<style>
  .tag-page-container {
    max-width: var(--content-max-width);
    margin: 0 auto;
    padding: 0 var(--spacing-4);
  }

  .page-header {
    margin-bottom: var(--spacing-8);
  }

  .tag-info {
    display: flex;
    align-items: center;
    gap: var(--spacing-4);
    margin-bottom: var(--spacing-4);
  }

  .tag-icon {
    display: flex;
    align-items: center;
    justify-content: center;
    width: 3rem;
    height: 3rem;
    background-color: var(--primary-color);
    color: white;
    border-radius: var(--border-radius-lg);
    font-size: var(--font-size-xl);
  }

  .tag-info h1 {
    margin: 0;
    font-size: var(--font-size-3xl);
    font-weight: var(--font-weight-bold);
    color: var(--text-color);
  }

  .tag-info p {
    margin: 0;
    font-size: var(--font-size-lg);
    color: var(--text-muted);
  }

  

  .posts-grid {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(350px, 1fr));
    gap: var(--spacing-6);
  }

  .empty-state {
    text-align: center;
    padding: var(--spacing-12) var(--spacing-4);
    color: var(--text-muted);
  }

  .empty-state i {
    font-size: 3rem;
    margin-bottom: var(--spacing-4);
    opacity: 0.5;
  }

  .empty-state p {
    font-size: var(--font-size-lg);
    margin: 0;
  }

  /* 响应式设置 */
  @media (max-width: 768px) {
    .tag-info {
      flex-direction: column;
      text-align: center;
      gap: var(--spacing-3);
    }

    .tag-info h1 {
      font-size: var(--font-size-2xl);
    }

    .posts-grid {
      grid-template-columns: 1fr;
      gap: var(--spacing-4);
    }

    
  }
</style>

