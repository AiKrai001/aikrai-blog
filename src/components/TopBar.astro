---
---

<header id="topbar" class="topbar">
  <div class="topbar-inner">
    <!-- ÁßªÂä®Á´ØËèúÂçïÊåâÈíÆ -->
    <button id="sidebar-toggle" class="sidebar-toggle" aria-label="Toggle sidebar">
      <i class="fas fa-bars"></i>
    </button>

    <!-- Èù¢ÂåÖÂ±ëÂØºËà™ -->
    <nav class="breadcrumb" aria-label="breadcrumb">
      <ol class="breadcrumb-list" id="breadcrumb-list">
        <li class="breadcrumb-item">
          <a href="/">È¶ñÈ°µ</a>
        </li>
      </ol>
    </nav>

    <!-- Âè≥‰æßÂ∑•ÂÖ∑Ê†è -->
    <!-- <div class="topbar-tools"> -->
      <!-- ÊêúÁ¥¢Ê†è -->
      <!-- <div class="search-container">
        <div class="search-box">
          <i class="fas fa-search search-icon"></i>
          <input 
            type="text" 
            id="search-input" 
            class="search-input" 
            placeholder="ÊêúÁ¥¢ÊñáÁ´†..."
            autocomplete="off"
          />
          <button id="search-clear" class="search-clear" aria-label="Clear search">
            <i class="fas fa-times"></i>
          </button>
        </div>
        <div id="search-results" class="search-results"></div>
      </div>
    </div> -->
  </div>
</header>

<style>
  .topbar {
    position: sticky;
    top: 0;
    height: var(--topbar-height);
    background-color: var(--topbar-bg);
    backdrop-filter: blur(10px);
    border-bottom: 1px solid var(--border-color);
    z-index: 100;
  }

  .topbar-inner {
    display: flex;
    align-items: center;
    justify-content: space-between;
    height: 100%;
    padding: 0 2rem;
  }

  .sidebar-toggle {
    display: none;
    background: none;
    border: none;
    color: var(--text-color);
    font-size: 1.2rem;
    cursor: pointer;
    padding: 0.5rem;
    border-radius: 0.25rem;
    transition: background-color 0.3s ease;
  }

  .sidebar-toggle:hover {
    background-color: var(--hover-bg);
  }

  .breadcrumb {
    flex: 1;
  }

  .breadcrumb-list {
    display: flex;
    align-items: center;
    list-style: none;
    margin: 0;
    padding: 0;
    font-size: 0.9rem;
    gap: 0.375rem;
  }

  .breadcrumb-item {
    display: flex;
    align-items: center;
  }

  .breadcrumb-item:not(:last-child)::after { content: none; }
  .breadcrumb-sep { color: var(--text-muted); padding: 0 0.375rem; user-select: none; }

  .breadcrumb-item a {
    color: var(--text-muted) !important;
    text-decoration: none;
    transition: color 0.3s ease;
  }

  .breadcrumb-item a:hover {
    color: var(--primary-color);
  }

  /* ÈùûÊúÄÂêé‰∏ÄÈ°πÁªü‰∏Ä‰∏∫Ê¨°Ë¶ÅËâ≤„ÄÅÂ∏∏ËßÑÂ≠óÈáç */
  .breadcrumb-item:not(:last-child) a,
  .breadcrumb-item:not(:last-child) span {
    color: var(--text-muted) !important;
    font-weight: var(--font-weight-normal, 400);
  }
  /* ÊúÄÂêé‰∏ÄÈ°πÔºàÂΩìÂâçÈ°µÔºâÂä†Ê∑± */
  .breadcrumb-item:last-child span,
  .breadcrumb-item:last-child a { color: var(--text-color); font-weight: var(--font-weight-medium); }
  .breadcrumb-item:last-child a { pointer-events: none; }

  /* Global-scoped fixes so dynamically added items also style correctly */
  :global(#topbar .breadcrumb-item) {
    display: flex;
    align-items: center;
  }
  :global(#topbar .breadcrumb-sep) {
    color: var(--text-muted);
    padding: 0 0.375rem;
    user-select: none;
  }
  :global(#topbar .breadcrumb-item a),
  :global(#topbar .breadcrumb-item a:link),
  :global(#topbar .breadcrumb-item a:visited),
  :global(#topbar .breadcrumb-item a:active),
  :global(#topbar .breadcrumb-item a:focus) {
    color: var(--text-muted) !important;
    text-decoration: none;
    transition: color 0.3s ease;
  }
  :global(#topbar .breadcrumb-item a:hover) {
    color: var(--primary-color);
  }
  :global(#topbar .breadcrumb-item:not(:last-child) a),
  :global(#topbar .breadcrumb-item:not(:last-child) span) {
    color: var(--text-muted) !important;
    font-weight: var(--font-weight-normal, 400);
  }
  :global(#topbar .breadcrumb-item:last-child span),
  :global(#topbar .breadcrumb-item:last-child a) {
    color: var(--text-color);
    font-weight: var(--font-weight-medium);
  }
  :global(#topbar .breadcrumb-item:last-child a) {
    pointer-events: none;
  }

  .topbar-tools {
    display: flex;
    align-items: center;
    gap: 0.5rem;
  }

  .search-container {
    position: relative;
  }

  .search-box {
    position: relative;
    display: flex;
    align-items: center;
    width: 300px;
    height: 2.5rem;
    background-color: var(--input-bg);
    border: 1px solid var(--input-border);
    border-radius: var(--border-radius-lg);
    transition: all var(--transition-fast);
  }

  .search-box:focus-within {
    border-color: var(--primary-color);
    box-shadow: 0 0 0 2px rgba(0, 123, 255, 0.1);
  }

  .search-icon {
    position: absolute;
    left: 0.75rem;
    color: var(--text-muted);
    font-size: 0.9rem;
    pointer-events: none;
  }

  .search-input {
    flex: 1;
    height: 100%;
    padding: 0 2.5rem 0 2.5rem;
    background: transparent;
    border: none;
    outline: none;
    color: var(--text-color);
    font-size: var(--font-size-sm);
  }

  .search-input::placeholder {
    color: var(--text-muted);
  }

  .search-clear {
    position: absolute;
    right: 0.5rem;
    display: none;
    align-items: center;
    justify-content: center;
    width: 1.5rem;
    height: 1.5rem;
    background: none;
    border: none;
    color: var(--text-muted);
    font-size: 0.8rem;
    cursor: pointer;
    border-radius: 50%;
    transition: all var(--transition-fast);
  }

  .search-clear:hover {
    color: var(--text-color);
    background-color: var(--hover-bg);
  }

  .search-clear.show {
    display: flex;
  }

  .search-results {
    position: absolute;
    top: calc(100% + 0.5rem);
    left: 0;
    right: 0;
    max-height: 400px;
    background-color: var(--card-bg);
    border: 1px solid var(--border-color);
    border-radius: var(--border-radius-lg);
    box-shadow: var(--shadow-lg);
    overflow-y: auto;
    z-index: 1000;
    display: none;
  }

  .search-results.show {
    display: block;
  }

  .search-loading,
  .search-no-results,
  .search-error {
    padding: 1rem;
    text-align: center;
    color: var(--text-muted);
    font-size: var(--font-size-sm);
  }

  .search-error {
    color: var(--danger-color);
  }

  .search-result-item {
    border-bottom: 1px solid var(--border-color);
  }

  .search-result-item:last-child {
    border-bottom: none;
  }

  .search-result-link {
    display: block;
    padding: 1rem;
    color: inherit;
    text-decoration: none;
    transition: background-color var(--transition-fast);
  }

  .search-result-link:hover {
    background-color: var(--hover-bg);
  }

  .search-result-title {
    font-weight: 600;
    font-size: var(--font-size-base);
    color: var(--text-color);
    margin-bottom: 0.25rem;
    line-height: 1.4;
  }

  .search-result-excerpt {
    font-size: var(--font-size-sm);
    color: var(--text-muted);
    line-height: 1.5;
    margin-bottom: 0.5rem;
    display: -webkit-box;
    -webkit-line-clamp: 2;
    -webkit-box-orient: vertical;
    overflow: hidden;
  }

  .search-result-meta {
    display: flex;
    align-items: center;
    gap: 0.75rem;
    font-size: var(--font-size-xs);
    color: var(--text-muted);
  }

  .search-result-date {
    display: flex;
    align-items: center;
  }

  .search-result-date::before {
    content: 'üìÖ';
    margin-right: 0.25rem;
  }

  .search-result-category {
    display: flex;
    align-items: center;
    padding: 0.125rem 0.5rem;
    background-color: var(--tag-bg);
    color: var(--tag-color);
    border-radius: var(--border-radius);
    font-size: var(--font-size-xs);
  }

  .search-result-category::before {
    content: 'üè∑Ô∏è';
    margin-right: 0.25rem;
  }

  /* ÊêúÁ¥¢È´ò‰∫ÆÊ†∑Âºè */
  .search-results mark {
    background-color: var(--primary-color);
    color: white;
    padding: 0.125rem 0.25rem;
    border-radius: 0.125rem;
    font-weight: 600;
  }

  /* ÂìçÂ∫îÂºèËÆæËÆ° */
  @media (max-width: 1199px) {
    .sidebar-toggle {
      display: block;
    }
  }

  @media (max-width: 768px) {
    .topbar-inner {
      padding: 0 1rem;
    }

    .breadcrumb {
      display: none;
    }
  }
</style>

<script>
  // ‰æßËæπÊ†èÂàáÊç¢
  document.addEventListener('DOMContentLoaded', () => {
    const sidebarToggle = document.getElementById('sidebar-toggle');
    const sidebar = document.getElementById('sidebar');
    const sidebarOverlay = document.getElementById('sidebar-overlay');

    function toggleSidebar() {
      sidebar?.classList.toggle('show');
      sidebarOverlay?.classList.toggle('show');
    }

    sidebarToggle?.addEventListener('click', toggleSidebar);
    sidebarOverlay?.addEventListener('click', toggleSidebar);

    // ‰∏ªÈ¢òÂàáÊç¢
    const themeToggle = document.getElementById('theme-toggle');
    const themeIcon = document.getElementById('theme-icon');

    function updateThemeIcon(isDark: boolean) {
      // ‰ΩøÁî®Âõ∫ÂÆöÁöÑÂØπÊØîÂ∫¶ÂõæÊ†áÔºå‰∏çÂÜçÂàáÊç¢Â§™Èò≥/Êúà‰∫ÆÁ±ªÂêç
      if (themeIcon) {
        themeIcon.setAttribute('data-theme', isDark ? 'dark' : 'light');
      }
    }

    // ÂàùÂßãÂåñ‰∏ªÈ¢òÂõæÊ†á
    const currentTheme = localStorage.getItem('theme') || 'light';
    updateThemeIcon(currentTheme === 'dark');

    themeToggle?.addEventListener('click', () => {
      const isDark = document.documentElement.getAttribute('data-theme') === 'dark';
      const newTheme = isDark ? 'light' : 'dark';
      
      document.documentElement.setAttribute('data-theme', newTheme);
      localStorage.setItem('theme', newTheme);
      updateThemeIcon(newTheme === 'dark');
    });

    // ÊêúÁ¥¢ÂäüËÉΩ
    const searchInput = document.getElementById('search-input') as HTMLInputElement;
    const searchClear = document.getElementById('search-clear');
    const searchResults = document.getElementById('search-results');
    
    if (searchInput && searchClear && searchResults) {
      let searchTimeout: NodeJS.Timeout;
      
      // ÊêúÁ¥¢ËæìÂÖ•Â§ÑÁêÜ
      searchInput.addEventListener('input', function() {
        const query = this.value.trim();
        
        if (query.length > 0) {
          searchClear.classList.add('show');
          
          // Èò≤ÊäñÊêúÁ¥¢
          clearTimeout(searchTimeout);
          searchTimeout = setTimeout(() => {
            performSearch(query);
          }, 300);
        } else {
          searchClear.classList.remove('show');
          searchResults.classList.remove('show');
        }
      });
      
      // Ê∏ÖÈô§ÊêúÁ¥¢
      searchClear.addEventListener('click', function() {
        searchInput.value = '';
        searchClear.classList.remove('show');
        searchResults.classList.remove('show');
        searchInput.focus();
      });
      
      // ÁÇπÂáªÂ§ñÈÉ®ÂÖ≥Èó≠ÊêúÁ¥¢ÁªìÊûú
      document.addEventListener('click', function(e) {
        if (!(e.target as Element).closest('.search-container')) {
          searchResults.classList.remove('show');
        }
      });
      
      // ÈîÆÁõòÂØºËà™ÊîØÊåÅ
      searchInput.addEventListener('keydown', function(e) {
        if (e.key === 'Escape') {
          searchResults.classList.remove('show');
          searchInput.blur();
        }
      });
    }

    // Âä®ÊÄÅÈù¢ÂåÖÂ±ëÂØºËà™
    const breadcrumbList = document.getElementById('breadcrumb-list');
    if (breadcrumbList) {
      const currentPath = window.location.pathname;
      const pathSegments = currentPath.split('/').filter(segment => segment);
      
      // Ê∏ÖÈô§ÈªòËÆ§Èù¢ÂåÖÂ±ëÔºà‰øùÁïôÈ¶ñÈ°µÔºâ
      const homeItem = breadcrumbList.querySelector('.breadcrumb-item');
      breadcrumbList.innerHTML = '';
      if (homeItem) {
        breadcrumbList.appendChild(homeItem);
      }
      
      // Ê†πÊçÆË∑ØÂæÑÁîüÊàêÈù¢ÂåÖÂ±ë
      let currentUrl = '';
      pathSegments.forEach((segment, index) => {
        currentUrl += '/' + segment;
        const isLast = index === pathSegments.length - 1;
        
        // ÂØπ‰∫éÂçöÂÆ¢ÊñáÁ´†È°µÈù¢ÔºåË∑≥Ëøá "blog" ÊÆµÔºåÁõ¥Êé•ÊòæÁ§∫ÊñáÁ´†Ê†áÈ¢ò
        if (segment === 'blog' && pathSegments.length > 1) {
          return; // Ë∑≥Ëøá blog ÊÆµ
        }
        
        const li = document.createElement('li');
        li.className = 'breadcrumb-item';
        
        let displayName = segment;
        let linkUrl = currentUrl;
        
        // URLËß£Á†ÅÂ§ÑÁêÜ‰∏≠ÊñáÂ≠óÁ¨¶
        try {
          displayName = decodeURIComponent(segment);
        } catch (e) {
          // Â¶ÇÊûúËß£Á†ÅÂ§±Ë¥•Ôºå‰ΩøÁî®ÂéüÂßãÂ≠óÁ¨¶‰∏≤
          displayName = segment;
        }
        
        // Ëá™ÂÆö‰πâÊòæÁ§∫ÂêçÁß∞
        if (segment === 'categories') displayName = 'ÂàÜÁ±ª';
        else if (segment === 'tags') displayName = 'Ê†áÁ≠æ';
        else if (segment === 'archives') displayName = 'ÂΩíÊ°£';
        else if (segment === 'about') displayName = 'ÂÖ≥‰∫é';
        else if (pathSegments[0] === 'blog' && isLast) {
          // Â¶ÇÊûúÊòØÂçöÂÆ¢ÊñáÁ´†È°µÈù¢ÁöÑÊúÄÂêé‰∏ÄÊÆµÔºàÊñáÁ´†Ê†áÈ¢òÔºâÔºåÊ†ºÂºèÂåñÊòæÁ§∫
          if (displayName.includes('-')) {
            displayName = displayName.replace(/-/g, ' ').replace(/\b\w/g, l => l.toUpperCase());
          }
        }
        
        // Âú®ÊØè‰∏™Èù¢ÂåÖÂ±ëÈ°π‰πãÂâçÂä†ÂÖ•ÂàÜÈöîÁ¨¶ÔºàÈ¶ñÈ°µÂêéÈù¢ÂºÄÂßãÔºâ
        const sep = document.createElement('li');
        sep.className = 'breadcrumb-sep';
        sep.textContent = '/';
        breadcrumbList.appendChild(sep);

        if (isLast) {
          li.innerHTML = `<span>${displayName}</span>`;
        } else {
          // Âú®ËØ¶ÊÉÖÈ°µÔºåÂ∞Ü‚ÄúÂàÜÁ±ª/Ê†áÁ≠æ‚ÄùÊòæÁ§∫‰∏∫ÊôÆÈÄöÊñáÊú¨
          if ((segment === 'categories' || segment === 'tags') && pathSegments.length > index + 1) {
            li.innerHTML = `<span>${displayName}</span>`;
          } else {
            li.innerHTML = `<a href="${linkUrl}">${displayName}</a>`;
          }
        }

        breadcrumbList.appendChild(li);

        // ‰øùËØÅÈô§ÊúÄÂêé‰∏ÄÊÆµÂ§ñÂùá‰∏∫ÂèØÁÇπÂáªÈìæÊé•ÔºàÂõûÈÄÄÂ§ÑÁêÜÔºâ
        if (!isLast && li.querySelector('span')) {
          li.innerHTML = `<a href="${linkUrl}">${displayName}</a>`;
        }
      });
    }
  });

  // ÊâßË°åÊêúÁ¥¢
  async function performSearch(query: string) {
    const searchResults = document.getElementById('search-results');
    if (!searchResults) return;
    
    try {
      // ÊòæÁ§∫Âä†ËΩΩÁä∂ÊÄÅ
      searchResults.innerHTML = '<div class="search-loading">ÊêúÁ¥¢‰∏≠...</div>';
      searchResults.classList.add('show');
      
      // ËøôÈáåÂ∫îËØ•Ë∞ÉÁî®ÂÆûÈôÖÁöÑÊêúÁ¥¢APIÔºåÁé∞Âú®ÂÖàÁî®Ê®°ÊãüÊï∞ÊçÆ
      const results = await mockSearch(query);
      
      if (results.length > 0) {
        searchResults.innerHTML = results.map(result => `
          <div class="search-result-item">
            <a href="${result.url}" class="search-result-link">
              <div class="search-result-title">${highlightText(result.title, query)}</div>
              <div class="search-result-excerpt">${highlightText(result.excerpt, query)}</div>
              <div class="search-result-meta">
                <span class="search-result-date">${result.date}</span>
                ${result.category ? `<span class="search-result-category">${result.category}</span>` : ''}
              </div>
            </a>
          </div>
        `).join('');
      } else {
        searchResults.innerHTML = '<div class="search-no-results">Êú™ÊâæÂà∞Áõ∏ÂÖ≥ÊñáÁ´†</div>';
      }
      
      searchResults.classList.add('show');
    } catch (error) {
      console.error('ÊêúÁ¥¢Âá∫Èîô:', error);
      searchResults.innerHTML = '<div class="search-error">ÊêúÁ¥¢Âá∫ÈîôÔºåËØ∑Á®çÂêéÈáçËØï</div>';
      searchResults.classList.add('show');
    }
  }

  // Ê®°ÊãüÊêúÁ¥¢ÂáΩÊï∞ÔºàÂÆûÈôÖÈ°πÁõÆ‰∏≠Â∫îËØ•ÊõøÊç¢‰∏∫ÁúüÂÆûÁöÑÊêúÁ¥¢ÈÄªËæëÔºâ
  async function mockSearch(query: string) {
    // Ê®°ÊãüAPIÂª∂Ëøü
    await new Promise(resolve => setTimeout(resolve, 200));
    
    // Ê®°ÊãüÊêúÁ¥¢ÁªìÊûú
    const mockData = [
      { 
        title: 'Astro ÈùôÊÄÅÁ´ôÁÇπÁîüÊàêÂô®ÂÖ•Èó®', 
        excerpt: 'Â≠¶‰π†Â¶Ç‰Ωï‰ΩøÁî® Astro ÊûÑÂª∫Áé∞‰ª£ÈùôÊÄÅÁΩëÁ´ôÔºåÂåÖÊã¨ÁªÑ‰ª∂Á≥ªÁªü„ÄÅÂÜÖÂÆπÈõÜÂêàÁ≠âÊ†∏ÂøÉÊ¶ÇÂøµ„ÄÇ', 
        url: '/blog/astro-getting-started/',
        date: '2024-01-15',
        category: 'ÂâçÁ´ØÂºÄÂèë'
      },
      { 
        title: 'TypeScript ÊúÄ‰Ω≥ÂÆûË∑µÊåáÂçó', 
        excerpt: 'Ê∑±ÂÖ•‰∫ÜËß£ TypeScript ÁöÑÈ´òÁ∫ßÁâπÊÄßÂíåÊúÄ‰Ω≥ÂÆûË∑µÔºåÊèêÂçá‰ª£Á†ÅË¥®ÈáèÂíåÂºÄÂèëÊïàÁéá„ÄÇ', 
        url: '/blog/typescript-best-practices/',
        date: '2024-01-10',
        category: 'ÁºñÁ®ãËØ≠Ë®Ä'
      },
      { 
        title: 'CSS Grid Â∏ÉÂ±ÄÂÆåÂÖ®ÊåáÂçó', 
        excerpt: 'ÊéåÊè° CSS Grid Â∏ÉÂ±ÄÁ≥ªÁªüÔºåÂàõÂª∫Â§çÊùÇËÄåÁÅµÊ¥ªÁöÑÁΩëÈ°µÂ∏ÉÂ±Ä„ÄÇ', 
        url: '/blog/css-grid-guide/',
        date: '2024-01-05',
        category: 'ÂâçÁ´ØÂºÄÂèë'
      }
    ];
    
    return mockData.filter(item => 
      item.title.toLowerCase().includes(query.toLowerCase()) ||
      item.excerpt.toLowerCase().includes(query.toLowerCase()) ||
      item.category.toLowerCase().includes(query.toLowerCase())
    );
  }

  // È´ò‰∫ÆÊêúÁ¥¢ÂÖ≥ÈîÆËØç
  function highlightText(text: string, query: string): string {
    const regex = new RegExp(`(${query.replace(/[.*+?^${}()|[\]\\]/g, '\\$&')})`, 'gi');
    return text.replace(regex, '<mark>$1</mark>');
  }
</script>
