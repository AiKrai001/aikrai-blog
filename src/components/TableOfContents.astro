---
export interface Props {
  headings: Array<{
    depth: number;
    slug: string;
    text: string;
  }>;
}

const { headings } = Astro.props;
---

<div class="toc-container">
  <div class="toc-header">
    <h3>目录</h3>
  </div>
  <nav class="toc-nav">
    <ul class="toc-list">
      {headings.map((heading) => (
        <li class={`toc-item toc-level-${heading.depth}`}>
          <a href={`#${heading.slug}`} class="toc-link">
            {heading.text}
          </a>
        </li>
      ))}
    </ul>
  </nav>
</div>

<style>
  .toc-container {
    position: sticky;
    top: calc(var(--topbar-height) + 2rem);
    max-height: calc(100vh - var(--topbar-height) - 4rem);
    overflow-y: auto;
    background-color: var(--card-bg);
    border: 1px solid var(--border-color);
    border-radius: var(--border-radius-lg);
    padding: 1.5rem;
    margin-left: auto;
    width: 100%;
  }

  .toc-header {
    margin-bottom: 1rem;
    padding-bottom: 0.75rem;
    border-bottom: 1px solid var(--border-color);
  }

  .toc-header h3 {
    margin: 0;
    font-size: var(--font-size-lg);
    font-weight: 600;
    color: var(--text-color);
  }

  .toc-nav {
    font-size: var(--font-size-sm);
  }

  .toc-list {
    list-style: none;
    margin: 0;
    padding: 0;
  }

  .toc-item {
    margin: 0.25rem 0;
  }

  .toc-level-1 {
    margin-left: 0;
  }

  .toc-level-2 {
    margin-left: 1rem;
  }

  .toc-level-3 {
    margin-left: 2rem;
  }

  .toc-level-4 {
    margin-left: 3rem;
  }

  .toc-level-5 {
    margin-left: 4rem;
  }

  .toc-level-6 {
    margin-left: 5rem;
  }

  .toc-link {
    display: block;
    padding: 0.375rem 0.75rem;
    color: var(--text-muted);
    text-decoration: none;
    border-radius: var(--border-radius);
    transition: all var(--transition-fast);
    line-height: 1.4;
  }

  .toc-link:hover {
    color: var(--primary-color);
    background-color: var(--hover-bg);
  }

  .toc-link.active {
    color: var(--primary-color);
    background-color: var(--primary-bg);
    font-weight: 500;
  }

  /* 响应式设计 */
  @media (max-width: 1199px) {
    .toc-container {
      display: none;
    }
  }
</style>

<script>
  document.addEventListener('DOMContentLoaded', function() {
    const tocLinks = document.querySelectorAll('.toc-link');
    const headings = document.querySelectorAll('h1, h2, h3, h4, h5, h6');
    
    if (tocLinks.length === 0 || headings.length === 0) return;

    // 创建 Intersection Observer
    const observer = new IntersectionObserver((entries) => {
      entries.forEach(entry => {
        const id = entry.target.getAttribute('id');
        const tocLink = document.querySelector(`.toc-link[href="#${id}"]`);
        
        if (entry.isIntersecting) {
          // 移除所有活动状态
          tocLinks.forEach(link => link.classList.remove('active'));
          // 添加当前活动状态
          if (tocLink) {
            tocLink.classList.add('active');
          }
        }
      });
    }, {
      rootMargin: '-100px 0px -66%',
      threshold: 0
    });

    // 观察所有标题
    headings.forEach(heading => {
      if (heading.id) {
        observer.observe(heading);
      }
    });

    // 平滑滚动
    tocLinks.forEach(link => {
      link.addEventListener('click', function(e: Event) {
        e.preventDefault();
        const target = e.currentTarget as HTMLAnchorElement;
        const targetId = target.getAttribute('href')?.substring(1);
        const targetElement = document.getElementById(targetId || '');
        
        if (targetElement) {
          const topbarHeight = parseInt(getComputedStyle(document.documentElement).getPropertyValue('--topbar-height')) || 60;
          const targetPosition = targetElement.offsetTop - topbarHeight - 20;
          
          window.scrollTo({
            top: targetPosition,
            behavior: 'smooth'
          });
        }
      });
    });
  });
</script>